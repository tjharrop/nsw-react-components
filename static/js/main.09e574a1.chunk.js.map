{"version":3,"sources":["components/accordion/index.js","components/button/index.js","components/notification/index.js","components/tags/index.js","components/callout/index.js","components/in-page-navigation/index.js","components/breadcrumbs/index.js","components/link-list/index.js","components/card/index.js","App.js","reportWebVitals.js","index.js"],"names":["IDstart","NSWaccordion","props","header","closed","speed","onOpen","afterOpen","onClose","afterClose","dark","className","attributeOptions","children","setAriaRoles","bind","toggleClasses","removeClass","addClass","accordionToggle","accordionOpen","accordionClose","toggle","ID","closeClass","prevProps","this","accordionHeader","element","target","state","setAttribute","openingClass","closingClass","oldClass","newClass","classList","remove","replace","RegExp","split","join","add","elements","callbacks","SetAriaRoles","ToggleClasses","window","event","cancelBubble","stopPropagation","error","undefined","length","i","targetId","getAttribute","document","getElementById","Error","style","display","AU","animate","Toggle","property","prefunction","postfunction","height","getComputedStyle","currentStyle","parseInt","Run","endSize","callback","preventDefault","aria-controls","aria-expanded","ref","onClick","id","React","PureComponent","defaultProps","options","NSWbutton","linkComponent","link","as","type","block","LinkComponent","href","to","info","warning","success","icons","NSWnotification","title","alt","focusable","class","Tag","text","TagList","tags","map","tag","Callout","level","srOnlyTitle","description","HeadingTag","InpageNavLinksItem","li","InpageNavLinks","sections","ariaLabel","section","Breadcrumbs","label","items","aria-label","inline","BreadcrumbLinkListItem","BreadcrumbLinkList","item","LinkListItem","aria-hidden","LinkList","Card","headline","content","date","dateMomentFormat","image","imageAlt","attributesOptions","CardContainer","src","shadow","centred","clickable","CardContent","CardHeader","CardImage","CardCopy","CardTag","CardDate","datetime","moment","format","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.09e574a1.chunk.js","sourcesContent":["/*! [replace-name] v[replace-version] */\n/***************************************************************************************************************************************************************\n *\n * Accordion function\n *\n * A component to allow users to show or hide page elements.\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AU from '@gov.au/animate'; // interdependency with our animate lib\n\n\n// The following line will be replaced automatically with generic imports for the ES5 pipeline.\n// You can safely ignore this bit if you use this module with pancake\n//\n// [replace-imports]\n\n\nlet IDstart = 0;\n\nclass NSWaccordion extends React.PureComponent {\n\t/**\n\t * Constructor\n\t * Create state and iterate over a unique ID\n\t *\n\t * @param  {object}  props - The props object\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tconst { header, closed, speed, onOpen, afterOpen, onClose, afterClose, dark, className = '', children, ...attributeOptions } = props;\n\n\t\tthis.setAriaRoles     = this.setAriaRoles.bind( this );\n\t\tthis.toggleClasses    = this.toggleClasses.bind( this );\n\t\tthis.removeClass      = this.removeClass.bind( this );\n\t\tthis.addClass         = this.addClass.bind( this );\n\t\tthis.accordionToggle  = this.accordionToggle.bind( this );\n\t\tthis.accordionOpen    = this.accordionOpen.bind( this );\n\t\tthis.accordionClose   = this.accordionClose.bind( this );\n\t\tthis.toggle           = this.toggle.bind( this );\n\t\tthis.className        = className;\n\t\tthis.attributeOptions = attributeOptions;\n\n\t\t// Generate a unique ID and our css class\n\t\tIDstart ++;\n\n\t\tthis.ID = `accordion${ IDstart }`;\n\t\tthis.closeClass = this.props.closed ? 'nsw-accordion--closed' : '';\n\t}\n\n\n\t/**\n\t * Handle state if supplied\n\t */\n\tcomponentDidUpdate( prevProps ) {\n\t\tif ( this.props.closed !== prevProps.closed ) {\n\t\t\tif ( this.props.closed ) {\n\t\t\t\tthis.accordionClose( this.accordionHeader );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.accordionOpen( this.accordionHeader );\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Set the correct Aria roles for given element on the accordion title and body\n\t *\n\t * @param  {object} element  - The DOM element we want to set attributes for\n\t * @param  {object} target   - The DOM element we want to set attributes for\n\t * @param  {string} state    - The DOM element we want to set attributes for\n\t */\n\tsetAriaRoles( element, target, state ) {\n\n\t\tif( state === 'closing' ) {\n\t\t\telement.setAttribute( 'aria-expanded', false );\n\t\t}\n\t\telse {\n\t\t\telement.setAttribute( 'aria-expanded', true );\n\t\t}\n\t}\n\n\n\t/**\n\t * IE8 compatible function for replacing classes on a DOM node\n\t *\n\t * @param  {object} element       - The DOM element we want to toggle classes on\n\t * @param  {object} target        - The DOM element we want to toggle classes on\n\t * @param  {object} state         - The current state of the animation on the element\n\t * @param  {string} openingClass  - The firstClass you want to toggle on the DOM node\n\t * @param  {string} closingClass  - The secondClass you want to toggle on the DOM node\n\t */\n\ttoggleClasses( element, state, openingClass, closingClass ) {\n\t\tif( state === 'opening' || state === 'open' ) {\n\t\t\tvar oldClass = openingClass || 'nsw-accordion--closed';\n\t\t\tvar newClass = closingClass || 'nsw-accordion--open';\n\t\t}\n\t\telse {\n\t\t\tvar oldClass = closingClass || 'nsw-accordion--open';\n\t\t\tvar newClass = openingClass || 'nsw-accordion--closed';\n\t\t}\n\n\t\tthis.removeClass( element, oldClass );\n\t\tthis.addClass( element, newClass );\n\t}\n\n\n\t/**\n\t * IE8 compatible function for removing a class\n\t *\n\t * @param  {object} element   - The DOM element we want to manipulate\n\t * @param  {object} className - The name of the class to be removed\n\t */\n\tremoveClass( element, className ) {\n\t\tif( element.classList ) {\n\t\t\telement.classList.remove( className );\n\t\t}\n\t\telse {\n\t\t\telement.className = element.className.replace( new RegExp(\"(^|\\\\b)\" + className.split(\" \").join(\"|\") + \"(\\\\b|$)\", \"gi\"), \" \" );\n\t\t}\n\t}\n\n\n\t/**\n\t * IE8 compatible function for adding a class\n\t *\n\t * @param  {object} element   - The DOM element we want to manipulate\n\t * @param  {object} className - The name of the class to be added\n\t */\n\taddClass( element, className ) {\n\t\tif( element.classList ) {\n\t\t\telement.classList.add( className );\n\t\t}\n\t\telse {\n\t\t\telement.className = element.className + \" \" + className;\n\t\t}\n\t}\n\n\n\t/**\n\t * Toggle an accordion element\n\t *\n\t * @param  {string}  elements  - The DOM node/s to toggle\n\t * @param  {integer} speed     - The speed in ms for the animation\n\t * @param  {object}  callbacks - An object of four optional callbacks: { onOpen, afterOpen, onClose, afterClose }\n\t *\n\t */\n\taccordionToggle( elements, speed, callbacks ) {\n\t\tconst SetAriaRoles = this.setAriaRoles;\n\t\tconst ToggleClasses = this.toggleClasses;\n\n\t\t// stop event propagation\n\t\ttry {\n\t\t\twindow.event.cancelBubble = true;\n\t\t\twindow.event.stopPropagation();\n\t\t}\n\t\tcatch( error ) {}\n\n\t\t// making sure we can iterate over just one DOM element\n\t\tif( elements.length === undefined ) {\n\t\t\telements = [ elements ];\n\t\t}\n\n\t\t// check this once\n\t\tif( typeof callbacks != 'object' ) {\n\t\t\tcallbacks = {};\n\t\t}\n\n\t\tfor( var i = 0; i < elements.length; i++ ) {\n\n\t\t\tvar element = elements[ i ];\n\t\t\tvar targetId = element.getAttribute('aria-controls');\n\t\t\tvar target = document.getElementById( targetId );\n\n\t\t\tif( target == null ) {\n\t\t\t\tthrow new Error('AU.animate.Toggle cannot find the target to be toggled from inside aria-controls');\n\t\t\t}\n\n\t\t\ttarget.style.display = 'block';\n\n\n\t\t\t(function( element ) {\n\t\t\t\tAU.animate.Toggle({\n\t\t\t\t\telement: target,\n\t\t\t\t\tproperty: 'height',\n\t\t\t\t\tspeed: speed || 250,\n\t\t\t\t\tprefunction: function( target, state ) {\n\t\t\t\t\t\tif( state === 'opening' ) {\n\t\t\t\t\t\t\ttarget.style.display = 'block';\n\n\t\t\t\t\t\t\t// run when opening\n\t\t\t\t\t\t\tif( typeof callbacks.onOpen === 'function' ) {\n\t\t\t\t\t\t\t\tcallbacks.onOpen();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// run when closing\n\t\t\t\t\t\t\tif( typeof callbacks.onClose === 'function' ) {\n\t\t\t\t\t\t\t\tcallbacks.onClose();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tSetAriaRoles( element, target, state );\n\t\t\t\t\t\tToggleClasses( element, state );\n\t\t\t\t\t},\n\t\t\t\t\tpostfunction: function( target, state ) {\n\t\t\t\t\t\tif( state === 'closed' ) {\n\t\t\t\t\t\t\ttarget.style.display = '';\n\t\t\t\t\t\t\ttarget.style.height = '';\n\n\t\t\t\t\t\t\t// run after opening\n\t\t\t\t\t\t\tif( typeof callbacks.afterOpen === 'function' ) {\n\t\t\t\t\t\t\t\tcallbacks.afterClose();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\t// run after closing\n\t\t\t\t\t\t\tif( typeof callbacks.afterClose === 'function' ) {\n\t\t\t\t\t\t\t\tcallbacks.afterOpen();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tToggleClasses( target, state );\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t})( element );\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\n\t/**\n\t * Open a group of accordion elements\n\t *\n\t * @param  {string}  elements  - The DOM node/s to toggle\n\t * @param  {integer} speed     - The speed in ms for the animation\n\t *\n\t */\n\taccordionOpen( elements, speed ) {\n\t\tconst ToggleClasses = this.toggleClasses;\n\n\t\t// stop event propagation\n\t\ttry {\n\t\t\twindow.event.cancelBubble = true;\n\t\t\twindow.event.stopPropagation();\n\t\t}\n\t\tcatch( error ) {}\n\n\t\tif( elements.length === undefined ) {\n\t\t\telements = [ elements ];\n\t\t}\n\n\t\tfor( var i = 0; i < elements.length; i++ ) {\n\n\t\t\tvar element = elements[ i ];\n\t\t\tvar targetId = element.getAttribute('aria-controls');\n\t\t\tvar target = document.getElementById( targetId );\n\n\t\t\t// let’s find out if this accordion is still closed\n\t\t\tvar height = 0;\n\t\t\tif( typeof getComputedStyle !== 'undefined' ) {\n\t\t\t\theight = window.getComputedStyle( target ).height;\n\t\t\t}\n\t\t\telse {\n\t\t\t\theight = target.currentStyle.height;\n\t\t\t}\n\n\t\t\tif( parseInt( height ) === 0 ) {\n\t\t\t\ttarget.style.height = '0px';\n\t\t\t}\n\n\t\t\ttarget.style.display = '';\n\t\t\tthis.toggleClasses( target, 'opening' );\n\t\t\tthis.toggleClasses( element, 'opening' );\n\t\t\tthis.setAriaRoles( element, target, 'opening' );\n\n\t\t\t(function( target, speed, element ) {\n\t\t\t\tAU.animate.Run({\n\t\t\t\t\telement: target,\n\t\t\t\t\tproperty: 'height',\n\t\t\t\t\tendSize: 'auto',\n\t\t\t\t\tspeed: speed || 250,\n\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\tToggleClasses( element, 'opening' );\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t})( target, speed, element );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Close a group of accordion elements\n\t *\n\t * @param  {string}  elements  - The DOM node/s to toggle\n\t * @param  {integer} speed     - The speed in ms for the animation\n\t *\n\t */\n\taccordionClose( elements, speed ) {\n\n\t\tconst ToggleClasses = this.toggleClasses;\n\n\t\t// stop event propagation\n\t\ttry {\n\t\t\twindow.event.cancelBubble = true;\n\t\t\twindow.event.stopPropagation();\n\t\t}\n\t\tcatch( error ) {}\n\n\t\tif( elements.length === undefined ) {\n\t\t\telements = [ elements ];\n\t\t}\n\n\t\tfor( var i = 0; i < elements.length; i++ ) {\n\n\t\t\tvar element = elements[ i ];\n\t\t\tvar targetId = element.getAttribute('aria-controls');\n\t\t\tvar target = document.getElementById( targetId );\n\n\t\t\tthis.toggleClasses( element, 'closing' );\n\t\t\tthis.setAriaRoles( element, target, 'closing' );\n\n\t\t\t(function( target, speed ) {\n\t\t\t\tAU.animate.Run({\n\t\t\t\t\telement: target,\n\t\t\t\t\tproperty: 'height',\n\t\t\t\t\tendSize: 0,\n\t\t\t\t\tspeed: speed || 250,\n\t\t\t\t\tcallback: function() {\n\t\t\t\t\t\ttarget.style.display = '';\n\t\t\t\t\t\ttarget.style.height = '';\n\t\t\t\t\t\tToggleClasses( target, 'close' );\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t})( target, speed );\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Toggle an accordion on click\n\t *\n\t * @param  {event object} event - The event object of the click\n\t */\n\ttoggle( event ) {\n\t\tevent.preventDefault();\n\n\t\tthis.accordionToggle( this.accordionHeader, this.props.speed, {\n\t\t\tonOpen: this.props.onOpen,\n\t\t\tafterOpen: this.props.afterOpen,\n\t\t\tonClose: this.props.onClose,\n\t\t\tafterClose: this.props.afterClose,\n\t\t});\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<section className={ `nsw-accordion ${ this.className }${ this.props.dark ? ' nsw-accordion--dark' : '' }` } { ...this.attributeOptions }>\n\t\t\t\t<h2\n\t\t\t\t\tclassName={`nsw-accordion__title js-nsw-accordion ${ this.closeClass }`}\n\t\t\t\t\taria-controls={ this.ID }\n\t\t\t\t\taria-expanded={ !this.props.closed }\n\t\t\t\t\tref={ accordionHeader => { this.accordionHeader = accordionHeader } }\n\t\t\t\t\tonClick={ ( event ) => this.toggle( event ) }>\n\t\t\t\t\t\t{ this.props.header }\n\t\t\t\t</h2>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName={`nsw-accordion__body ${ this.closeClass }`}\n\t\t\t\t\tid={ this.ID }>\n\t\t\t\t\t<div className=\"nsw-accordion__body-wrapper\">\n\n\t\t\t\t\t\t{ this.props.children }\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t);\n\t}\n};\n\nNSWaccordion.propTypes = {\n\tchildren: PropTypes.node.isRequired,\n\theader: PropTypes.string.isRequired,\n\tclosed: PropTypes.bool,\n\tspeed: PropTypes.number,\n\tdark: PropTypes.bool,\n\tonOpen: PropTypes.func,\n\tafterOpen: PropTypes.func,\n\tonClose: PropTypes.func,\n\tafterClose: PropTypes.func,\n\tclassName: PropTypes.string,\n};\n\nNSWaccordion.defaultProps = {\n\tclosed: false,\n};\n\nexport default NSWaccordion;\n","/*! [replace-name] v[replace-version] */\n/***************************************************************************************************************************************************************\n *\n * buttons function\n *\n * Buttons signal action. Use them to move the user through the service.\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\n// The following line will be replaced automatically with generic imports for the ES5 pipeline.\n// You can safely ignore this bit if you use this module with pancake\n//\n// [replace-imports]\n\n\n/**\n * All different kind of button options\n *\n * @type {Object}\n */\nconst options = {\n\t'primary': 'nsw-button--primary',\n\t'secondary': 'nsw-button--secondary',\n\t'danger': 'nsw-button--highlight',\n};\n\n\n/**\n * DEFAULT\n * The primary button\n *\n * @param  {string}   linkComponent    - The component used for the link\n * @param  {string}   link             - If this is a link the location it goes\n * @param  {string}   children         - Anything inside\n * @param  {string}   as               - The kind of button, can be either 'primary', 'secondary', 'tertiary', default: 'primary'\n * @param  {boolean}  dark             - Add the dark variation class, optional\n * @param  {string}   type             - The type attribute, default: 'button', optional\n * @param  {boolean}  block            - The block option, optional\n * @param  {string}   className        - An additional class, optional\n * @param  {object}   attributeOptions - Any other attribute options\n */\nconst NSWbutton = ({ linkComponent, link, children, as, dark, type, block, className = '', ...attributeOptions }) => {\n\tif( link ) {\n\t\tconst LinkComponent = linkComponent;\n\n\t\t// If we are using a normal link\n\t\tif( LinkComponent === 'a' ) {\n\t\t\tattributeOptions.href = link;\n\t\t}\n\t\t// If we are using a link component\n\t\telse if( typeof LinkComponent === 'function' ) {\n\t\t\tattributeOptions.to = link;\n\t\t}\n\n\t\treturn (\n\t\t\t<LinkComponent\n\t\t\t\tclassName={ `nsw-button ${ className } ${ options[ as ] }${ block ? ' nsw-button--block' : '' }${ dark ? ' nsw-button--dark' : '' }` }\n\t\t\t\t{ ...attributeOptions }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</LinkComponent>\n\t\t);\n\t}\n\telse {\n\t\treturn (\n\t\t\t<button\n\t\t\t\ttype={ type }\n\t\t\t\tclassName={ `nsw-button ${ className } ${ options[ as ] }${ block ? ' nsw-button--block' : '' }${ dark ? ' nsw-button--dark' : '' }` }\n\t\t\t\t{ ...attributeOptions }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</button>\n\t\t);\n\t}\n};\n\nNSWbutton.propTypes = {\n\tlink: PropTypes.string,\n\tchildren: PropTypes.node.isRequired,\n\tas: PropTypes.oneOf([ 'primary', 'secondary', 'danger' ]).isRequired,\n\tdark: PropTypes.bool,\n\ttype: PropTypes.string,\n\tblock: PropTypes.bool,\n\tclassName: PropTypes.string,\n\tlinkComponent: PropTypes.oneOfType([ PropTypes.string, PropTypes.func ]),\n};\n\nNSWbutton.defaultProps = {\n\ttype: 'button',\n\tas: 'primary',\n\tlinkComponent: 'a',\n};\n\nexport default NSWbutton;\n","/*! [replace-name] v[replace-version] */\n/***************************************************************************************************************************************************************\n *\n * Page alert function\n *\n * Use page alert to notify and alert users of important application events.\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '@material-ui/core/Icon';\n\n// The following line will be replaced automatically with generic imports for the ES5 pipeline.\n// You can safely ignore this bit if you use this module with pancake\n//\n// [replace-imports]\n\n/**\n * All different kind of alerts\n *\n * @type {Object}\n */\n const options = {\n \tinfo: 'nsw-notification--info',\n \twarning: 'nsw-notification--warning',\n \terror: 'nsw-notification--error',\n \tsuccess: 'nsw-notification--success',\n };\n\n const icons = {\n \tinfo: 'info',\n \twarning: 'cancel',\n \terror: 'error',\n \tsuccess: 'check_circle',\n };\n\n\n/**\n * DEFAULT\n * Page alert\n *\n * @param  {boolean} dark             - Add the dark variation class, optional\n * @param  {boolean} alt              - Add the alt variation class, optional\n * @param  {string}  as               - What kind of alert this is, takes: 'info', 'warning', 'error', 'success'\n * @param  {node}    children         - Anything inside the component\n * @param  {string}  className        - An additional class, optional\n * @param  {object}  attributeOptions - Any other attribute options\n */\nconst NSWnotification = ({ title = '', as, alt, dark, children, className = '', ...attributeOptions }) => (\n\t<div\n\t\tclassName={`nsw-notification ${ className } ${\n\t\t\tdark\n\t\t\t\t? ' nsw-notification--dark au-body--dark'\n\t\t\t\t: ''\n\t\t\t}${\n\t\t\talt\n\t\t\t\t? ' nsw-notification--alt au-body--alt'\n\t\t\t\t: ''\n\t\t\t} ${ options[ as ] }`} { ...attributeOptions }\n\t>\n\n    <i focusable=\"false\" className=\"material-icons nsw-material-icons nsw-notification__icon\">{ icons[ as ] }</i>\n    <div class=\"nsw-notification__content\">\n      <h4 class=\"nsw-notification__title\">{ title }</h4>\n      { children }\n    </div>\n\t</div>\n);\n\nNSWnotification.propTypes = {\n\tas: PropTypes.oneOf([ 'info', 'warning', 'error', 'success' ]).isRequired,\n\talt: PropTypes.bool,\n\tdark: PropTypes.bool,\n\tchildren: PropTypes.node.isRequired,\n\tclassName: PropTypes.string,\n};\n\nexport default NSWnotification;\n","/*! [replace-name] v[replace-version] */\n/***************************************************************************************************************************************************************\n *\n * tags function\n *\n * Use tags to apply a taxonomy and link to similar content.\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * TODO\n * @param  {string}  link             - The link for this tag, optional\n * @param  {string}  text             - The text for the tag\n * @param  {boolean} dark             - Add the dark variation class, optional\n * @param  {object}  attributeOptions - Any other attribute options\n */\nexport const Tag = ({ link, dark, text, linkComponent, className, ...attributeOptions }) => {\n\n\tlet TagContainer = 'span';\n\tlet LinkComponent = linkComponent;\n\n\n\tif( LinkComponent === 'a' ) {\n\t\tattributeOptions.href = link;\n\t}\n\t// If we are using a link component\n\telse if( typeof LinkComponent === 'function' ) {\n\t\tattributeOptions.to = link;\n\t}\n\n\treturn (\n\t\tlink ?\n\t\t\t<LinkComponent className={`nsw-tag ${ dark ? 'nsw-tag--dark' : ''} ${className}`} { ...attributeOptions }>{ text }</LinkComponent>\n\t\t\t:\n\t\t\t<TagContainer {...attributeOptions} className={`nsw-tag ${ dark ? 'nsw-tag--dark' : ''} ${className}`}>\n\t\t\t\t{text}\n\t\t\t</TagContainer>\n\t)\n}\n\n\nTag.propTypes = {\n\tlink: PropTypes.string,\n\ttext: PropTypes.string.isRequired,\n\tli: PropTypes.object,\n\tlinkComponent: PropTypes.oneOfType([ PropTypes.string, PropTypes.func ]),\n};\n\nTag.defaultProps = {\n\tlinkComponent: 'a',\n\tclassName: ''\n};\n\n\n\n/**\n * DEFAULT\n * The tags component\n *\n * @param  {boolean} dark             - Add the dark variation class, optional\n * @param  {array}   tags             - The tags, format: { link: '', text: '', onClick: () }\n * @param  {string}  className        - An additional class, optional\n * @param  {object}  li               - An additional object to be spread into the list item\n * @param  {object}  attributeOptions - Any other attribute options\n */\nconst TagList = ({ dark, tags, className = '', ...attributeOptions }) => (\n\t<div className={ `nsw-tag-list ${ className }` } { ...attributeOptions }>\n\t\t{\n\t\t\ttags.map(\n\t\t\t\t( tag, i ) => (\n\n\t\t\t\t\t\t<Tag\n\t\t\t\t\t\t\tdark={dark}\n\t\t\t\t\t\t\tlinkComponent={ tag.linkComponent }\n\t\t\t\t\t\t\tlink={tag.link}\n\t\t\t\t\t\t\ttext={tag.text}\n\t\t\t\t\t\t\t{...tag.attributeOptions}\n\t\t\t\t\t\t/>\n\n\t\t\t\t)\n\t\t\t)\n\t\t}\n\t</div>\n);\n\nTagList.propTypes = {\n\tdark: PropTypes.bool,\n\ttags: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tlink: PropTypes.string,\n\t\t\ttext: PropTypes.string.isRequired,\n\t\t\tli: PropTypes.object,\n\t\t})\n\t).isRequired,\n\tclassName: PropTypes.string,\n};\n\nTagList.defaultProps = {\n\tdark: false\n};\n\nexport default TagList;\n","/*! [replace-name] v[replace-version] */\n/***************************************************************************************************************************************************************\n *\n * Callout function\n *\n * Use callout to notify and alert users of important snippets of information.\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\n// The following line will be replaced automatically with generic imports for the ES5 pipeline.\n// You can safely ignore this bit if you use this module with pancake\n//\n// [replace-imports]\n\n\n/**\n * Default callout\n *\n * @param  {string}  title            - The title of the header\n * @param  {string}  level            - The tag level (<h1/> <h2/> etc), default: '1'\n * @param  {boolean} srOnlyTitle      - Title is visible to screen readers only\n * @param  {boolean} dark             - Add the dark variation class, optional\n * @param  {boolean} alt              - Add the alt variation class, optional\n * @param  {string}  children         - Anything inside\n * @param  {string}  className        - An additional class, optional\n * @param  {object}  attributeOptions - Any other attribute options\n */\nexport const Callout = ({ title, level, srOnlyTitle, dark, alt, description, children, className = '', ...attributeOptions }) => {\n\tconst HeadingTag = `h${ level }`;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={ `nsw-callout ${ className }${ dark ? ' nsw-callout--dark' : '' }${ alt ? ' nsw-callout--alt' : '' }` }\n\t\t\t{ ...attributeOptions }\n\t\t>\n      <div class=\"nsw-callout__content\">\n  \t\t\t<HeadingTag\n  \t\t\t\tchildren={ title }\n  \t\t\t\tclassName={ `nsw-callout__title${ srOnlyTitle ? ' nsw-callout__title--sronly' : '' }` }\n  \t\t\t/>\n  \t\t\t{ children }\n      </div>\n    </div>\n\t)\n};\n\nCallout.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\tlevel: PropTypes.number,\n\tsrOnlyTitle: PropTypes.bool,\n\tdark: PropTypes.bool,\n\talt: PropTypes.bool,\n\tchildren: PropTypes.node.isRequired,\n\tclassName: PropTypes.string,\n};\n\nCallout.defaultProps = {\n\tlevel: 4,\n\tsrOnlyTitle: false,\n};\n\nexport default Callout;\n","\n/*! [replace-name] v[replace-version] */\n/***************************************************************************************************************************************************************\n *\n * inpage-nav function\n *\n * Use inpage-nav links to help users scan and jump to content of a page.\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\n// The following line will be replaced automatically with generic imports for the ES5 pipeline.\n// You can safely ignore this bit if you use this module with pancake\n//\n// [replace-imports]\n\n\n/**\n * The section component for the InpageNavLinks component\n *\n * @param  {object} link             - The link of this section\n * @param  {object} title            - The title of the section\n * @param  {object} li               - An additional object to be spread into the wrapping element, optional\n * @param  {object} attributeOptions - Any other attribute options\n */\nexport const InpageNavLinksItem = ({ link, title, li = {}, ...attributeOptions }) => (\n\t<li className='nsw-page-nav__list-item' { ...li }>\n\t\t<a className='nsw-page-nav__link' href={ `#${ link }` } { ...attributeOptions }>{ title }</a>\n\t</li>\n);\n\nInpageNavLinksItem.propTypes = {\n\tlink: PropTypes.string.isRequired,\n\ttitle: PropTypes.string.isRequired,\n\tli: PropTypes.object,\n};\n\n\n/**\n * The inpage-nav component\n *\n * @param  {boolean} dark             - Add the dark variation class, optional\n * @param  {string}  title            - The title of the content link block, default: Contents\n * @param  {array}   sections         - An array of objects of all sections, sample: { link: '', title: '', onClick: () }\n * @param  {string}  className        - An additional class, optional\n * @param  {string}  ariaLabel        - The aria-label attribute, optional\n * @param  {object}  attributeOptions - Any other attribute options\n */\nexport const InpageNavLinks = ({ dark, title, sections, ariaLabel, className = '', ...attributeOptions }) => (\n\t<nav className={ `nsw-page-nav ${ className }${ dark ? ' nsw-page-nav--dark' : '' }` } ariaLabel={ ariaLabel } { ...attributeOptions }>\n\t\t<h2 className=\"nsw-page-nav__title\">{ title }</h2>\n\n\t\t<ul className=\"nsw-page-nav__list\">\n\t\t\t{ sections.map( ( section, i ) => <InpageNavLinksItem key={ i } { ...section } /> ) }\n\t\t</ul>\n\t</nav>\n);\n\nInpageNavLinks.propTypes = {\n\tdark: PropTypes.bool,\n\ttitle: PropTypes.string.isRequired,\n\tsections: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tlink: PropTypes.string.isRequired,\n\t\t\ttitle: PropTypes.string.isRequired,\n\t\t\tli: PropTypes.object,\n\t\t})\n\t).isRequired,\n\tclassName: PropTypes.string,\n};\n\nInpageNavLinks.defaultProps = {\n\ttitle: 'Contents',\n\tariaLabel: 'in page navigation',\n};\n\nexport default InpageNavLinks;\n","\n/*! [replace-name] v[replace-version] */\n/***************************************************************************************************************************************************************\n *\n * breadcrumbs function\n *\n * Breadcrumbs help users understand where they are in the service and how they got there.\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\n// The following line will be replaced automatically with generic imports for the ES5 pipeline.\n// You can safely ignore this bit if you use this module with pancake\n//\n// [replace-imports]\n\n\n/**\n * DEFAULT\n * The breadcrumbs component\n *\n * @param  {boolean} dark             - Add the dark variation class, optional\n * @param  {string}  label            - The aria label of the component\n * @param  {array}   items            - Items inside the breadcrumbs passed on to BreadcrumbLinkList\n * @param  {string}  linkComponent    - The component used for the link\n * @param  {string}  className        - An additional class, optional\n * @param  {object}  attributeOptions - Any other attribute options\n */\nconst Breadcrumbs = ({ dark, label, items, linkComponent, className = '', ...attributeOptions }) => (\n\t<nav\n\t\tclassName={ `nsw-breadcrumb ${ className }` }\n\t\taria-label={ label }\n\t\t{ ...attributeOptions }\n\t>\n\t\t<BreadcrumbLinkList inline linkComponent={ linkComponent } items={ items } />\n\t</nav>\n);\n\nBreadcrumbs.propTypes = {\n\tdark: PropTypes.bool,\n\tlabel: PropTypes.string.isRequired,\n\titems: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tlink: PropTypes.string,\n\t\t\ttext: PropTypes.string.isRequired,\n\t\t})\n\t).isRequired,\n\tlinkComponent: PropTypes.oneOfType([ PropTypes.string, PropTypes.func ])\n};\n\nBreadcrumbs.defaultProps = {\n\tlinkComponent: 'a',\n};\n\n/**\n * An item inside the BreadcrumbLinkList component\n *\n * @param  {node}   text             - The link Text or link html\n * @param  {string} link             - The link URL, optional\n * @param  {string} linkComponent    - The component used for the link\n * @param  {object} li               - An additional object to be spread into the wrapping element, optional\n * @param  {object} onClick          - The onClick event handler\n * @param  {object} attributeOptions - Any other attribute options, optional\n */\nexport const BreadcrumbLinkListItem = ({ text, link, linkComponent, li = {}, children, onClick, ...attributeOptions }) => {\n\tconst LinkComponent = linkComponent;\n\n\t// If there is no link provided and an onClick function\n\tif( typeof onClick === 'function' ) {\n\t\tattributeOptions.onClick = onClick;\n\n\t\t// if we find an onClick event but no link we make it a link so onClick can be added (no button support yet)\n\t\tif( !link ) {\n\t\t\tlink = '#';\n\t\t}\n\t}\n\n\t// If we are using a normal link\n\tif( LinkComponent === 'a' ) {\n\t\tattributeOptions.href = link;\n\t}\n\t// If we are using a link component\n\telse if( typeof LinkComponent === 'function' ) {\n\t\tattributeOptions.to = link;\n\t}\n\n\tif( link ){\n\t\treturn (\n\t\t\t<li className='nsw-breadcrumb__item' { ...li }>\n\t\t\t\t<LinkComponent className='nsw-breadcrumb__link' { ...attributeOptions }>{ text }</LinkComponent>\n\t\t\t\t{ children }\n\t\t\t</li>\n\t\t)\n\t}\n\n\treturn ( <li className='nsw-breadcrumb__item' { ...li }>{ text }{ children }</li> );\n};\n\nBreadcrumbLinkListItem.propTypes = {\n\ttext: PropTypes.node.isRequired,\n\tlink: PropTypes.string,\n\tli: PropTypes.object,\n\tonClick: PropTypes.func,\n\tlinkComponent: PropTypes.oneOfType([ PropTypes.string, PropTypes.func ])\n};\n\nBreadcrumbLinkListItem.defaultProps = {\n\tlinkComponent: \"a\",\n};\n\n\n/**\n * DEFAULT\n * The Link List component\n *\n * @param  {array}   items            - All items inside the link list to be passed to BreadcrumbLinkListItem, format: { link: '', text: '', onClick: () }\n * @param  {string}  className        - An additional class, optional\n * @param  {string}  linkComponent    - The component used for the link\n * @param  {object}  attributeOptions - Any other attribute options, optional\n */\nconst BreadcrumbLinkList = ({ inline, items, linkComponent, className = '', ...attributeOptions }) => (\n\t<ol className={ `nsw-breadcrumb__list ${ className }${ inline ? ' nsw-breadcrumb__list--inline' : '' }` } { ...attributeOptions }>\n\t\t{\n\t\t\titems.map(\n\t\t\t\t( item, i ) => <BreadcrumbLinkListItem linkComponent={ linkComponent } key={ i } { ...item } />\n\t\t\t)\n\t\t}\n\t</ol>\n);\n\nBreadcrumbLinkList.propTypes = {\n\tinline: PropTypes.bool,\n\titems: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tlink: PropTypes.string,\n\t\t\ttext: PropTypes.node.isRequired,\n\t\t\tli: PropTypes.object,\n\t\t})\n\t).isRequired,\n\tlinkComponent: PropTypes.oneOfType([ PropTypes.string, PropTypes.func ])\n};\n\nBreadcrumbLinkList.defaultProps = {\n\tlinkComponent: \"a\",\n};\n\nexport default Breadcrumbs;\n","\n/*! [replace-name] v[replace-version] */\n/***************************************************************************************************************************************************************\n *\n * link list function\n *\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\n// The following line will be replaced automatically with generic imports for the ES5 pipeline.\n// You can safely ignore this bit if you use this module with pancake\n//\n// [replace-imports]\n\n\n/**\n * DEFAULT\n * The breadcrumbs component\n *\n * @param  {boolean} dark             - Add the dark variation class, optional\n * @param  {string}  label            - The aria label of the component\n * @param  {array}   items            - Items inside the breadcrumbs passed on to LinkList\n * @param  {string}  linkComponent    - The component used for the link\n * @param  {string}  className        - An additional class, optional\n * @param  {object}  attributeOptions - Any other attribute options\n */\n\n\n/**\n * An item inside the LinkList component\n *\n * @param  {node}   text             - The link Text or link html\n * @param  {string} link             - The link URL, optional\n * @param  {string} linkComponent    - The component used for the link\n * @param  {object} li               - An additional object to be spread into the wrapping element, optional\n * @param  {object} onClick          - The onClick event handler\n * @param  {object} attributeOptions - Any other attribute options, optional\n */\nexport const LinkListItem = ({ text, link, linkComponent, li = {}, children, onClick, ...attributeOptions }) => {\n\tconst LinkComponent = linkComponent;\n\n\t// If there is no link provided and an onClick function\n\tif( typeof onClick === 'function' ) {\n\t\tattributeOptions.onClick = onClick;\n\n\t\t// if we find an onClick event but no link we make it a link so onClick can be added (no button support yet)\n\t\tif( !link ) {\n\t\t\tlink = '#';\n\t\t}\n\t}\n\n\t// If we are using a normal link\n\tif( LinkComponent === 'a' ) {\n\t\tattributeOptions.href = link;\n\t}\n\t// If we are using a link component\n\telse if( typeof LinkComponent === 'function' ) {\n\t\tattributeOptions.to = link;\n\t}\n\n\tif( link ){\n\t\treturn (\n\t\t\t<li className='nsw-link-list__item' { ...li }>\n\t\t\t\t<LinkComponent { ...attributeOptions }>\n        { text }\n        <i class=\"material-icons nsw-material-icons nsw-link-list__icon\" focusable=\"false\" aria-hidden=\"true\">east</i>\n        </LinkComponent>\n\t\t\t\t{ children }\n\t\t\t</li>\n\t\t)\n\t}\n\n\treturn ( <li className='nsw-link-list__item' { ...li }>{ text }{ children }</li> );\n};\n\nLinkListItem.propTypes = {\n\ttext: PropTypes.node.isRequired,\n\tlink: PropTypes.string,\n\tli: PropTypes.object,\n\tonClick: PropTypes.func,\n\tlinkComponent: PropTypes.oneOfType([ PropTypes.string, PropTypes.func ])\n};\n\nLinkListItem.defaultProps = {\n\tlinkComponent: \"a\",\n};\n\n\n/**\n * DEFAULT\n * The Link List component\n *\n * @param  {array}   items            - All items inside the link list to be passed to LinkListItem, format: { link: '', text: '', onClick: () }\n * @param  {string}  className        - An additional class, optional\n * @param  {string}  linkComponent    - The component used for the link\n * @param  {object}  attributeOptions - Any other attribute options, optional\n */\nconst LinkList = ({ inline, items, linkComponent, className = '', ...attributeOptions }) => (\n  <div class=\"nsw-link-list\">\n  \t<ol className={ `nsw-link-list__list ${ className }${ inline ? ' nsw-link-list__list--inline' : '' }` } { ...attributeOptions }>\n  \t\t{\n  \t\t\titems.map(\n  \t\t\t\t( item, i ) => <LinkListItem linkComponent={ linkComponent } key={ i } { ...item } />\n  \t\t\t)\n  \t\t}\n  \t</ol>\n  </div>\n);\n\nLinkList.propTypes = {\n\tinline: PropTypes.bool,\n\titems: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tlink: PropTypes.string,\n\t\t\ttext: PropTypes.node.isRequired,\n\t\t\tli: PropTypes.object,\n\t\t})\n\t).isRequired,\n\tlinkComponent: PropTypes.oneOfType([ PropTypes.string, PropTypes.func ])\n};\n\nLinkList.defaultProps = {\n\tlinkComponent: \"a\",\n};\n\nexport default LinkList;\n","/*! [replace-name] v[replace-version] */\n/***************************************************************************************************************************************************************\n *\n * card function\n *\n * A container for all types of content\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\n/**\n * The card  component\n *\n * @param {string}   link               - The link that clicking the card goes to\n * @param {bool}     headline           - Adds a box shadow to card if true\n * @param {bool}     content            - Aligns all text to center if true\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nconst Card = ({ link, headline, content, tag, date, dateMomentFormat, image, imageAlt, className, children, ...attributesOptions }) => {\n\tlet CardContainer = 'div';\n\n\tif( link !== undefined ) {\n\t\tCardContainer = 'div';\n\t\tattributesOptions.href = link;\n\t}\n\n\treturn (\n\t\t<CardContainer className={`nsw-card ${className}` +\n\t\t\t\t\t\t\t\t`${headline ? 'nsw-card--headline' : ''} ` +\n\t\t\t\t\t\t\t\t`${content ? 'nsw-card--content' : ''} `}\n\t\t\t\t\t\t\t\t{...attributesOptions}\n\t\t\t\t\t\t\t\t>\n      <CardContent>\n        {headline ? <CardHeader link={link}>{headline}</CardHeader> : ''}\n        {children}\n        {date ? <CardDate date={date} dateMomentFormat={dateMomentFormat} /> : ''}\n        {tag ? <CardTag>{tag}</CardTag> : ''}\n      </CardContent>\n      {image ? <CardImage src={image} alt={imageAlt} /> : ''}\n\t\t</CardContainer>\n\t)\n};\n\nCard.propTypes = {\n\tlink: PropTypes.string,\n\tdark: PropTypes.bool,\n\talt: PropTypes.bool,\n\tshadow: PropTypes.bool,\n\tcentred: PropTypes.bool,\n\tclassName: PropTypes.string,\n};\n\nCard.defaultProps = {\n\tshadow: false,\n\tcentred: false,\n\tclickable: false,\n\tdark: false,\n\talt: false,\n\tclassName: '',\n  dateMomentFormat: 'Do MMMM YYYY'\n};\n\n\n/**\n * An inner container for the card, with padding of 1 rem\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardContent = ({ className, children, ...attributesOptions }) => (\n\t<div className={`nsw-card__content ${className}`} {...attributesOptions}>\n\t\t{children}\n    <i className=\"material-icons nsw-material-icons nsw-card__icon\" focusable=\"false\" aria-hidden=\"true\">east</i>\n\t</div>\n);\n\nCardContent.propTypes = {\n\tclassName: PropTypes.string\n}\n\nCardContent.defaultProps = {\n\tclassName: ''\n}\n\n\n/**\n * An inner container for the card, with padding of 1 rem\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardHeader = ({ className, level, alt, dark, link, children, ...attributesOptions }) => {\n      const HeadingTag = `h${ level }`;\n      if(link != undefined){\n        return (\n          <HeadingTag className={`nsw-card__title`}><a href='' className='nsw-card__link'>{children}</a></HeadingTag>\n        )\n      } else {\n        return (\n          <HeadingTag className={`nsw-card__title`}>{children}</HeadingTag >\n        )\n      }\n\n};\n\nCardHeader.propTypes = {\n\tclassName: PropTypes.string,\n\tdark: PropTypes.bool,\n\talt: PropTypes.bool,\n\tlevel: PropTypes.oneOf([ '1', '2', '3', '4', '5', '6' ]),\n}\n\nCardHeader.defaultProps = {\n\tclassName: '',\n\tdark: false,\n\talt: false,\n  level: 2\n}\n\n\n/**\n * An image inside the card\n * @param {string}   src                - Image source\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardImage = ({ src,className,alt, ...attributesOptions }) => (\n  <div class=\"nsw-card__image-area\">\n    <img className={`nsw-card__image ${className}`} src={ src } alt={ alt } {...attributesOptions} />\n  </div>\n);\n\nCardImage.propTypes = {\n\tsrc: PropTypes.string.isRequired,\n\tclassName: PropTypes.string\n};\n\nCardImage.defaultProps = {\n\tclassName: ''\n};\n\n\n/**\n * An paragraph inside the card\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardCopy = ({ src, children, className, ...attributesOptions }) => (\n\t<p className={`nsw-card__copy ${className}`}>\n    {children}\n  </p>\n);\n\nCardCopy.propTypes = {\n\tclassName: PropTypes.string\n};\n\nCardCopy.defaultProps = {\n\tclassName: ''\n};\n\n\n/**\n * An tag inside the card\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardTag = ({ src, children, className, ...attributesOptions }) => (\n\t<p className={`nsw-card__tag ${className}`}>\n    {children}\n  </p>\n);\n\nCardTag.propTypes = {\n\tclassName: PropTypes.string\n};\n\nCardTag.defaultProps = {\n\tclassName: ''\n};\n\n\n/**\n * An date inside the card\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardDate = ({ src, children, className, dateMomentFormat, date, ...attributesOptions }) => (\n\t<p className={`nsw-card__date ${className}`}>\n    <time datetime={date}>\n    {moment(date).format(dateMomentFormat)}\n    </time>\n  </p>\n);\n\nCardDate.propTypes = {\n\tclassName: PropTypes.string\n};\n\nCardDate.defaultProps = {\n\tclassName: '',\n  dateMomentFormat: 'Do MMMM YYYY'\n};\n\n\n/**\n * A horizontal rule used to divide content inside the card\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardDivider = ({ className, ...attributesOptions }) => (\n\t<hr className={`nsw-card__divider ${className}`} {...attributesOptions} />\n);\n\nCardDivider.propTypes = {\n\tclassName: PropTypes.string\n};\n\nCardDivider.defaultProps = {\n\tclassName: ''\n};\n\n\n\n/**\n * Use when making the entire click area of card clickable.\n * @param {string}   link               - The location of the link\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardLink = ({ link, text, className, ...attributesOptions }) => (\n\t<a href={link} className={`nsw-card--clickable__link ${className}`} {...attributesOptions}>\n\t\t{text}\n\t</a>\n);\n\nCardLink.propTypes = {\n\tlink: PropTypes.string.isRequired,\n\ttext: PropTypes.string.isRequired,\n\tclassName: PropTypes.string\n};\n\nCardLink.defaultProps = {\n\tclassName: ''\n};\n\n\n\n/**\n * The footer section of the card\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardFooter = ({ dark, alt, children, className, ...attributesOptions }) => {\n\n\n\tlet footerTheme = \"\";\n\n\tif ( dark || alt ) {\n\t\tfooterTheme = `au-body ${ dark ? \"au-body--dark\" : \"\" } ${ alt ? \"au-body--alt\" : \"\"}`\n\t};\n\n\treturn (\n\t\t<div className={`nsw-card__footer ${footerTheme} ${className}`} {...attributesOptions}>\n\t\t\t{children}\n\t\t</div>\n)};\n\nCardFooter.propTypes = {\n\tclassName: PropTypes.string,\n\tdark: PropTypes.bool,\n\talt: PropTypes.bool,\n}\n\nCardFooter.defaultProps = {\n\tclassName: '',\n\tdark: false,\n\talt: false,\n}\n\n\n\n/**\n * The footer section of the card\n * @param {string}   level              - The tag level (<h1/> <h2/> etc)\n * @param {string}   className          - An additional class, optional\n * @param {object}   attributeOptions   - Default HTML attributes\n */\nexport const CardTitle = ({ children, className, level, ...attributeOptions }) => {\n\tconst HeadingTag = `h${ level }`;\n\n\treturn (\n\t\t<HeadingTag className={ `nsw-card__title ${ className }` } { ...attributeOptions }>{ children }</HeadingTag>\n\t);\n};\n\nCardTitle.propTypes = {\n\tlevel: PropTypes.oneOf([ '1', '2', '3', '4', '5', '6' ]).isRequired,\n\tclassName: PropTypes.string\n};\n\nCardTitle.defaultProps = {\n\tclassName: ''\n};\n\n\nexport default Card;\n","import './App.css';\nimport React from \"react\";\nimport Accordion from './components/accordion';\nimport NSWbutton from './components/button';\nimport NSWnotification from './components/notification';\nimport TagList, {Tag} from './components/tags';\nimport Callout from './components/callout';\nimport InpageNavLinks from './components/in-page-navigation';\nimport Breadcrumbs from './components/breadcrumbs';\nimport LinkList from './components/link-list';\nimport Card, { CardContent, CardHeader, CardCopy, CardTag, CardDate } from './components/card';\nimport 'nsw-design-system/src/main.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div class=\"nsw-container\">\n        <h2 class=\"section-title\">Buttons</h2>\n        <NSWbutton>Primary button</NSWbutton>\n        <NSWbutton as='secondary'>Secondary button</NSWbutton>\n        <NSWbutton as='danger'>Danger button</NSWbutton>\n\n        <h2 class=\"section-title\">In-page notifications</h2>\n        <NSWnotification as='info' title='Info alert'>\n          <p>Content of alert</p>\n        </NSWnotification>\n        <br />\n        <NSWnotification as='error' title='Error alert'>\n          <p>Content of alert</p>\n        </NSWnotification>\n        <br />\n        <NSWnotification as='warning' title='Warning alert'>\n          <p>Content of alert</p>\n        </NSWnotification>\n        <br />\n        <NSWnotification as='success' title='Success alert'>\n          <p>Content of alert</p>\n        </NSWnotification>\n\n        <h2 class=\"section-title\">Tags</h2>\n        <TagList tags={[\n          {\n            text: 'foo',\n          },\n          {\n            text: 'bar',\n          },\n          {\n            text: 'baz',\n          },\n        ]} />\n\n        <h2 class=\"section-title\">Callout</h2>\n        <Callout title=\"Title of callout\">\n            <p>Description of callout</p>\n        </Callout>\n\n        <h2 class=\"section-title\">Cards</h2>\n        <div class='nsw-grid'>\n          <div class='nsw-col nsw-col-md-4'>\n            <Card\n              date='2021-03-17'\n              tag='Environment'\n              link='#'\n              headline='Card Title'\n              image='https://picsum.photos/id/292/400/200'\n              imageAlt='alt text'>\n                <CardCopy>Some text</CardCopy>\n            </Card>\n          </div>\n        </div>\n        <div class='nsw-grid'>\n          <div class='nsw-col nsw-col-md-4'>\n            <Card content\n              date='2021-03-17'\n              tag='Environment'\n              link='#'\n              headline='Card Title'\n              image='https://picsum.photos/id/292/400/200'\n              imageAlt='alt text'>\n                <CardCopy>Some text</CardCopy>\n            </Card>\n          </div>\n        </div>\n        <div class='nsw-grid'>\n          <div class='nsw-col nsw-col-md-4'>\n            <Card content\n              link='#'\n              headline='Card Title'>\n                <CardCopy>Some text</CardCopy>\n            </Card>\n          </div>\n        </div>\n        <div class='nsw-grid'>\n          <div class='nsw-col nsw-col-md-4'>\n            <Card\n              link='#'\n              headline='Card Title'>\n                <CardCopy>Some text</CardCopy>\n            </Card>\n          </div>\n        </div>\n\n        <h2 class=\"section-title\">In-page nav</h2>\n        <InpageNavLinks sections={[\n          {\n            link: 'section1',\n            title: 'Section 1',\n          },\n          {\n            link: 'section2',\n            title: 'Section 2',\n          },\n        ]} />\n\n        <h2 class=\"section-title\">Breadcrumbs</h2>\n        <Breadcrumbs label=\"Breadcrumb for this page\"\n          items={[\n            {\n              link: '#',\n              text: 'Home',\n            },\n            {\n              link: '#',\n              text: 'Parent',\n            },\n            {\n              text: 'Current page',\n            },\n          ]}\n        />\n\n\n        <h2 class=\"section-title\">Link list</h2>\n        <LinkList\n          items={[\n            {\n              link: '#',\n              text: 'Home',\n            },\n            {\n              link: '#',\n              text: 'Parent',\n            },\n          ]}\n        />\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"@fontsource/montserrat\"\nimport 'nsw-design-system/dist/css/main.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}